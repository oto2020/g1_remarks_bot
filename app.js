require('dotenv').config();
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const { saveMessage, getAllMessages, updateUserRoom, getCurrentRoom, getMessageCountForRoom, getMessagesForRoom } = require('./controllers/dbController');

const token = process.env.TOKEN;
const bot = new TelegramBot(token, { polling: true });

const groupId = '-4263608042'; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã

// Load rooms data
const rooms = JSON.parse(fs.readFileSync('rooms.json', 'utf8'));

// Function to generate main menu
const generateMainMenu = async () => {
    const buttons = await Promise.all(Object.keys(rooms).map(async key => {
        const count = await getMessageCountForRoom(key);
        return [{ text: `${rooms[key].title} (${count})`, callback_data: key }];
    }));
    return {
        reply_markup: {
            inline_keyboard: buttons
        }
    };
};

// Function to generate back button
const backButton = (department) => {
    return {
        reply_markup: {
            inline_keyboard: [
                [{ text: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª—É', callback_data: `back_to_${department}` }]
            ]
        }
    };
};

// Function to generate room menu
const generateRoomMenu = async (department) => {
    const buttons = await Promise.all(rooms[department].rooms.map(async room => {
        const count = await getMessageCountForRoom(room.callback_data);
        return [{ text: `${room.name} (${count})`, callback_data: room.callback_data }];
    }));
    buttons.push([{ text: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª–∞–º', callback_data: 'back_to_departments' }]);
    return {
        reply_markup: {
            inline_keyboard: buttons
        }
    };
};

const sendMessagesForRoom = async (chatId, callbackData) => {
    const messages = await getMessagesForRoom(callbackData);
    if (messages.length > 0) {
        await bot.sendMessage(chatId, `ü§ñ –†–∞–Ω–µ–µ –≤—ã–ø–∏—Å–∞–ª–∏ –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—é "${callbackData}":`);
    } else {
        await bot.sendMessage(chatId, `ü§ñ –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ–º–µ—â–µ–Ω–∏—é "${callbackData}" –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ñ–æ—Ç–æ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.`);
    }
    for (let i = 0; i < messages.length; i++) {
        let message = messages[i];
        const formattedTimestamp = new Date(message.timestamp).toISOString().slice(0, 19).replace('T', ' ');
        if (message.type === 'text') {
            await bot.sendMessage(chatId, `${message.content}\n[${formattedTimestamp}]`);
        }
        if (message.type === 'photo') {
            await bot.sendPhoto(chatId, message.content, { caption: `[${formattedTimestamp}]` });
        }
    }
    await bot.sendMessage(chatId, `ü§ñ –ï—Å–ª–∏ –µ—Å—Ç—å —á–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç—å, –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ.`);
};


// Start command
bot.onText(/\/start/, async (msg) => {
    await saveMessage(msg.from.id.toString(), msg.chat.id, null, msg.text, 'text', msg.text);
    bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', await generateMainMenu());
});

// Message handler
bot.on('message', async (msg) => {
    if (msg.from.id !== bot.id) {
        const currentRoom = await getCurrentRoom(msg.from.id.toString());

        if (msg.text) {
            if (currentRoom && currentRoom !== 'none') {
                await saveMessage(msg.from.id.toString(), msg.chat.id, currentRoom, msg.text, 'text', msg.text);
            } else {
                bot.sendMessage(msg.chat.id, '–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–º–µ—â–µ–Ω–∏–µ');
            }
        } else if (msg.photo) {
            const fileId = msg.photo[msg.photo.length - 1].file_id;
            await saveMessage(msg.from.id.toString(), msg.chat.id, currentRoom, fileId, 'photo', null);
        }
    }
});

// Callback query handler
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;

    if (data === 'back_to_departments') {
        bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª:', await generateMainMenu());
        await updateUserRoom(callbackQuery.from.id.toString(), 'none');
    } else if (rooms[data]) {
        bot.sendMessage(msg.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ:', await generateRoomMenu(data));
        await updateUserRoom(callbackQuery.from.id.toString(), 'none');
    } else {
        let found = false;
        for (const department in rooms) {
            const room = rooms[department].rooms.find(r => r.callback_data === data);
            if (room) {
                const messageText = `–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å —Ç—É—Ç üìç\n${rooms[department].title}: ${room.name}\n\n${room.intermediate_message}`;
                bot.sendMessage(msg.chat.id, messageText, backButton(department));
                // await saveMessage(callbackQuery.from.id.toString(), msg.chat.id, data, messageText, 'callback', data);
                await updateUserRoom(callbackQuery.from.id.toString(), data);
                await sendMessagesForRoom(msg.chat.id, data);
                found = true;
                break;
            } else if (data === `back_to_${department}`) {
                bot.sendMessage(msg.chat.id, `–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –æ—Ç–¥–µ–ª—É: ${rooms[department].title}`, await generateRoomMenu(department));
                await updateUserRoom(callbackQuery.from.id.toString(), 'none');
                found = true;
                break;
            }
        }
        if (!found) {
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    }
});

console.log('https://t.me/g1_remarks_bot');
