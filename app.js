require('dotenv').config();
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const db = require('./controllers/dbController');
const tg = require('./controllers/tgController');

const token = process.env.TOKEN;
const bot = new TelegramBot(token, { polling: true });

const groupId = '-4263608042'; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã

// Load rooms data
const rooms = JSON.parse(fs.readFileSync('rooms.json', 'utf8'));

const STATUS_ROOM_GOOD = 'üëç';       // 100%
const STATUS_ROOM_COMMENTED = '‚úçÔ∏è';       // 100%

// –î–∞–Ω–Ω—ã–µ –ø–æ –∫–æ–º–Ω–∞—Ç–µ –∏–∑ json –ø–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—É callbackData
const getRoomByCallbackData = (callbackData) => {
    for (const departmentKey in rooms) {
        const department = rooms[departmentKey];
        const room = department.rooms.find(room => room.callback_data === callbackData);
        if (room) {
            return {
                departmentKey: departmentKey,
                departmentTitle: department.title,
                roomName: room.name,
                roomIntermediateMessage: room.intermediate_message,
                roomCallbackData: room.callback_data
            };
        }
    }
    return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –ø–æ–º–µ—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
};


// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    await tg.sendMainMenu(bot, msg.chat.id);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', async (msg) => {
    if (msg.from.id !== bot.id) {
        const callbackData = await db.getCallbackData(msg.from.id.toString());
        if (callbackData == 'none') {
            await tg.sendMainMenu(bot, msg.chat.id);
            return;
        }

        if (msg.text) {
            await db.saveMessage(msg.from.id.toString(), msg.chat.id, callbackData, msg.text, 'text', msg.text);
        } else if (msg.photo) {
            const fileId = msg.photo[msg.photo.length - 1].file_id;
            const caption = msg.caption || null; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
            await db.saveMessage(msg.from.id.toString(), msg.chat.id, callbackData, fileId, 'photo', caption);
        }

        const count = await db.getMessageCountForRoom(callbackData);
        let room = getRoomByCallbackData(callbackData);
        if (!room) return;
        bot.sendMessage(
            msg.chat.id, 
            `ü§ñ –°–ø–∞—Å–∏–±–æ!\n–°–æ–æ–±—â–µ–Ω–∏—è (${count}) –¥–æ–ø–æ–ª–Ω–µ–Ω—ã.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ.`, 
            backButtonForDepartmentKey(room.departmentKey)
        );
    }
});

// –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;

    if (data.startsWith('mark_good_')) {
        const roomCallbackData = data.replace('mark_good_', '');
        await db.saveRoomStatus(callbackQuery.from.id.toString(), roomCallbackData, 'good');
        const count = await db.getMessageCountForRoom(roomCallbackData);
        let room = getRoomByCallbackData(roomCallbackData);

        // Send confirmation message
        await bot.sendMessage(
            msg.chat.id, 
            `ü§ñ –ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤ –ø–æ—Ä—è–¥–∫–µ ${STATUS_ROOM_GOOD} \n–ó–∞–º–µ—á–∞–Ω–∏—è (${count}) –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ –±—É–¥—É—Ç!`
        );

        // Simulate pressing "back to department" button by sending a new message with department menu
        await tg.sendRoomMenu(bot, msg.chat.id, room.departmentKey);
        await db.updateUserRoom(callbackQuery.from.id.toString(), 'none');
        return;
    }

    if (data.startsWith('open_comments_')) {
        const roomCallbackData = data.replace('open_comments_', '');
        await db.saveRoomStatus(callbackQuery.from.id.toString(), roomCallbackData, 'pending');
        let room = getRoomByCallbackData(roomCallbackData);

        const messages = await db.getMessagesForRoom(roomCallbackData);
        await tg.sendMessagesForRoom(bot, msg.chat.id, messages);

        bot.sendMessage(
            msg.chat.id,
            `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.\n–ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã ${STATUS_ROOM_COMMENTED}`,
            backButtonForDepartmentKey(room.departmentKey)
        );
        return;
    }

    if (data === 'back_to_departments') {
        await tg.sendMainMenu(bot, msg.chat.id);
        await db.updateUserRoom(callbackQuery.from.id.toString(), 'none');
    } else if (rooms[data]) {
        await tg.sendRoomMenu(bot, msg.chat.id, data);
        await db.updateUserRoom(callbackQuery.from.id.toString(), 'none');
    } else {
        let found = false;
        for (const department in rooms) {
            const room = rooms[department].rooms.find(r => r.callback_data === data);
            if (room) {
                let destination = `üìç ${rooms[department].title}\n‚û°Ô∏è ${room.name}`;

                const count = await db.getMessageCountForRoom(data);
                const status = await db.getRoomStatus(data);

                await db.updateUserRoom(callbackQuery.from.id.toString(), data);
                if (status !== 'good') {
                    const messages = await db.getMessagesForRoom(data);
                    await tg.sendMessagesForRoom(bot, msg.chat.id, messages);
                }
                let messageText = `ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å ${count} –∑–∞–º–µ—á–∞–Ω–∏–π, –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç, –ø–æ–¥–∫—Ä–µ–ø–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!\n\n${room.intermediate_message}\n\n${destination}`;
                if (status === 'good') {
                    messageText = `ü§ñ –ó–∞–º–µ—á–∞–Ω–∏—è (${count}) –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ –±—É–¥—É—Ç ${STATUS_ROOM_GOOD} \n\n ${destination}`;
                }

                const inline_keyboard = [
                    [{ text: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª—É', callback_data: `back_to_${department}` }]
                ];

                if (status === 'good') {
                    inline_keyboard.unshift([{ text: `${STATUS_ROOM_COMMENTED} –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è ${STATUS_ROOM_COMMENTED}`, callback_data: `open_comments_${data}` }]);
                } else {
                    inline_keyboard.unshift([{ text: `${STATUS_ROOM_GOOD} –í—Å—ë –æ–∫, –∑–∞–∫—Ä—ã—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è ${STATUS_ROOM_GOOD}`, callback_data: `mark_good_${data}` }]);
                }

                bot.sendMessage(msg.chat.id, messageText, {
                    reply_markup: { inline_keyboard }
                });
                found = true;
                break;
            } else if (data === `back_to_${department}`) {
                await tg.sendRoomMenu(bot, msg.chat.id, department);
                await db.updateUserRoom(callbackQuery.from.id.toString(), 'none');
                found = true;
                break;
            }
        }
        if (!found) {
            bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
        }
    }
});


console.log('https://t.me/g1_remarks_bot');
