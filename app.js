// app.js

require('dotenv').config();
const fs = require('fs');
const TelegramBot = require('node-telegram-bot-api');
const db = require('./controllers/dbController');
const tg = require('./controllers/tgController');

const token = process.env.TOKEN;
const bot = new TelegramBot(token, { polling: true });

const groupId = process.env.GROUP_CHAT_ID; // –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —à–∞–≥–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
const STEPS = {
    CONTACT: 0,     // –æ–∂–∏–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    NAME: 1,        // –æ–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    POSITION: 2,    // –æ–∂–∏–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏
    COMPLETED: 3    // —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
};

// STEPS —à–∞–≥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
// room: 'none' –∏–ª–∏ *callbackData –∏—Ö rooms.json*
// phoneNumber
// name
// position
const userStatuses = new Map();

function userStatusInit(chatId) {
    // –¥–ª—è –ª—é–±–æ–≥–æ –Ω–æ–≤–æ–≥–æ chatId —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if (!userStatuses.has(chatId)) {
        userStatuses.set(chatId, { step: STEPS.CONTACT, room: 'none', phoneNumber: 0, name: "", position: "" });
        return true;
    } 
    else {
        return false;
    }
}
// –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ –ë–î
async function registrationMiddleware(chatId) {
    // –¥–ª—è –ª—é–±–æ–≥–æ –Ω–æ–≤–æ–≥–æ chatId —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    userStatusInit(chatId);
    // —Å–º–æ—Ç—Ä–∏–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –ë–î
    let user = await db.getUser(chatId);
    if (user) {
        userStatuses.get(chatId).name = user.name;
        userStatuses.get(chatId).phoneNumber = user.phoneNumber;
        userStatuses.get(chatId).position = user.position;
        userStatuses.get(chatId).step = STEPS.COMPLETED;
        return true;
    }
    // –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ 
    if (!user) {
        // –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ –æ–Ω –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ userStatuses –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ bot.on('contact'
        if (userStatuses.get(chatId).step === STEPS.CONTACT) {
            tg.sendContactRequest(bot, chatId); 
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ bot.on('contact'
            return false;
        }
        if (userStatuses.get(chatId).step === STEPS.NAME) {
            bot.sendMessage(chatId, `ü§ñ –í–∞—à–∞ —Ñ–∞–º–∏–ª–∏—è –∏ –∏–º—è:`); 
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ bot.on('message'
            return false;
        }
        if (userStatuses.get(chatId).step === STEPS.POSITION) {
            bot.sendMessage(chatId, `ü§ñ –í–∞—à–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å:`);
            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≤ bot.on('message'
            return false;
        }
        if (userStatuses.get(chatId).step === STEPS.COMPLETED) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —à–∞–≥ == COMPLETED
            // –°–û–•–†–ê–ù–ï–ù–ò–ï –í –ë–î
            await db.createUser({
                chatId: chatId,
                name: userStatuses.get(chatId).name,
                phoneNumber: userStatuses.get(chatId).phoneNumber,
                position: userStatuses.get(chatId).position
            });
            let user = await db.getUser(chatId);
            bot.sendMessage(chatId, `ü§ñ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, ${user.position} ${user.name}, ${user.phoneNumber}`);
            bot.sendMessage(groupId, `ü§ñ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–ò–º—è: ${user.name}\n–î–æ–ª–∂–Ω–æ—Å—Ç—å: ${user.position}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${user.phoneNumber}`);
            let currentDay = getCurrentDateFormatted();
            let userName = userStatuses.get(chatId).name;
            await tg.sendMainMenu(bot, chatId, currentDay, userName);
            return true;
        }
    }

}

// Load rooms data
const rooms = JSON.parse(fs.readFileSync('rooms.json', 'utf8'));

const STATUS_ROOM_GOOD = 'üëç';
const STATUS_ROOM_COMMENTED = '‚úçÔ∏è';

function getCurrentDateFormatted() {
    const date = new Date();
    date.setDate(date.getDate()); 
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    console.log(`${year}-${month}-${day}`);
    return `${year}-${month}-${day}`;
}


const getRoomByCallbackData = (callbackData) => {
    for (const departmentKey in rooms) {
        const department = rooms[departmentKey];
        const room = department.rooms.find(room => room.callback_data === callbackData);
        if (room) {
            return {
                departmentKey,
                departmentTitle: department.title,
                roomName: room.name,
                roomIntermediateMessage: room.intermediate_message,
                roomCallbackData: room.callback_data
            };
        }
    }
    return null;
};

const sendRoomMenu = async (chatId, departmentKey) => {
    await tg.sendRoomMenu(bot, chatId, departmentKey);
    // userStatus changing
    userStatuses.get(chatId).room = 'none';
};

const sendBackButton = (departmentKey) => ({
    reply_markup: {
        inline_keyboard: [[{ text: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª—É', callback_data: `back_to_${departmentKey}` }]]
    }
});

const handleMessage = async (msg) => {
    const callbackData = userStatuses.get(msg.chat.id).room;
    if (callbackData === 'none') {
        let currentDay = getCurrentDateFormatted();
        let userName = userStatuses.get(msg.chat.id).name;
        await tg.sendMainMenu(bot, msg.chat.id, currentDay, userName);
        return;
    }

    if (msg.text) {
        await db.saveMessage( msg.chat.id, callbackData, msg.text, 'text', msg.text);
    } else if (msg.photo) {
        const fileId = msg.photo[msg.photo.length - 1].file_id;
        const caption = msg.caption || null;
        await db.saveMessage(msg.chat.id, callbackData, fileId, 'photo', caption);
    }

    const count = await db.getMessageCountForRoom(callbackData);
    const room = getRoomByCallbackData(callbackData);
    if (!room) return;

    bot.sendMessage(
        msg.chat.id,
        `ü§ñ –°–ø–∞—Å–∏–±–æ!\n–°–æ–æ–±—â–µ–Ω–∏—è (${count}) –¥–æ–ø–æ–ª–Ω–µ–Ω—ã.\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ.`,
        sendBackButton(room.departmentKey)
    );
};

async function sendDayReport(chatId, currentDay) {
    // currentDay = '2024-11-08';
    let userName = userStatuses.get(chatId).name;
    console.log(`${userName} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞ ${currentDay}`);
    
    await bot.sendMessage(chatId, `ü§ñ –í—ã–≥—Ä—É–∂–∞—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É, –æ–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.`);
    await bot.sendMessage(groupId, `ü§ñ –í–´–ì–†–£–ñ–ê–Æ –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–•–û–î–ê ${currentDay}`);
    let roomsCount = 0;
    let messagesCount = 0;
    const delay = ms => new Promise(resolve => setTimeout(resolve, ms));
    for (let section in rooms) {
        for (let room of rooms[section].rooms) {
            let roomCallbackData = room.callback_data;
            let msgs = await db.getRemarksForDayRoom(roomCallbackData, currentDay);
            if (msgs.length > 0 && !msgs.some(msg=>msg.type==='status' && msg.content==='good')) {
                roomsCount ++;
                messagesCount+=msgs.length;
                console.log(msgs);
                await tg.sendMessagesForRoom(bot, groupId, msgs);
                await delay(5000); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            }
        }
    }
    let finalText = `–í—Å–µ–≥–æ ${messagesCount} –∑–∞–º–µ—á–∞–Ω–∏–π –≤ ${roomsCount} –ø–æ–º–µ—â–µ–Ω–∏—è—Ö.`;
    await bot.sendMessage(chatId, `ü§ñ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ö–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n${finalText}`);
    await bot.sendMessage(groupId, `ü§ñ –í–´–ì–†–£–ó–ö–ê –û–ë–•–û–î–ê –ó–ê ${currentDay} –ó–ê–í–ï–†–®–ï–ù–ê!\n${finalText}`);
    console.log(finalText);
    // await tg.sendMainMenu(bot, msg.chat.id, currentDay, userName);
    // // userStatus changing
    // userStatuses.get(callbackQuery.from.id).room = 'none';
    return;
}
const handleCallbackQuery = async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;

    if (data.startsWith('mark_good_')) {
        const roomCallbackData = data.replace('mark_good_', '');
        await db.saveRoomStatus(callbackQuery.from.id, roomCallbackData, 'good');
        const count = await db.getMessageCountForRoom(roomCallbackData);
        const room = getRoomByCallbackData(roomCallbackData);

        await bot.sendMessage(
            msg.chat.id,
            `ü§ñ –ö–æ–º–Ω–∞—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤ –ø–æ—Ä—è–¥–∫–µ ${STATUS_ROOM_GOOD}\n–ó–∞–º–µ—á–∞–Ω–∏—è (${count}) –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ –±—É–¥—É—Ç!`
        );

        await sendRoomMenu(msg.chat.id, room.departmentKey);
        return;
    }

    if (data.startsWith('open_comments_')) {
        const roomCallbackData = data.replace('open_comments_', '');
        await db.saveRoomStatus(callbackQuery.from.id, roomCallbackData, 'pending');
        const room = getRoomByCallbackData(roomCallbackData);

        const messages = await db.getMessagesForRoom(roomCallbackData);
        await bot.sendMessage(msg.chat.id, `ü§ñ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã. –†–∞–Ω–µ–µ –ø–∏—Å–∞–ª–∏:`);
        await tg.sendMessagesForRoom(bot, msg.chat.id, messages);

        bot.sendMessage(
            msg.chat.id,
            `–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å.\n–ó–∞–º–µ—á–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã ${STATUS_ROOM_COMMENTED}`,
            sendBackButton(room.departmentKey)
        );
        return;
    }

    if (data === 'back_to_departments') {
        let currentDay = getCurrentDateFormatted();
        let userName = userStatuses.get(msg.chat.id).name;
        await tg.sendMainMenu(bot, msg.chat.id, currentDay, userName);
        // userStatus changing
        userStatuses.get(callbackQuery.from.id).room = 'none';
        return;
    }

    if (data === 'SEND_TO_GROUP') {
        let currentDay = getCurrentDateFormatted();
        await sendDayReport(msg.chat.id, currentDay); // 2024-12-24
    }

    if (rooms[data]) {
        await sendRoomMenu(msg.chat.id, data);
        return;
    }

    for (const department in rooms) {
        const room = rooms[department].rooms.find(r => r.callback_data === data);
        if (room) {
            await handleRoomSelection(callbackQuery, data, room, department);
            return;
        }

        if (data === `back_to_${department}`) {
            await sendRoomMenu(msg.chat.id, department);
            return;
        }
    }

    bot.sendMessage(msg.chat.id, '–û—à–∏–±–∫–∞: –ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.');
};

const handleRoomSelection = async (callbackQuery, data, room, department) => {
    const msg = callbackQuery.message;
    const destination = `üìç ${rooms[department].title}\n‚û°Ô∏è ${room.name}`;
    const count = await db.getMessageCountForRoom(data);
    const status = await db.getRoomStatus(data);

    // userStatus changing
    userStatuses.get(callbackQuery.from.id).room = data;
;
    if (status !== 'good') {
        const messages = await db.getMessagesForRoom(data);
        await bot.sendMessage(msg.chat.id, `ü§ñ –†–∞–Ω–µ–µ –ø–∏—Å–∞–ª–∏:`);
        await tg.sendMessagesForRoom(bot, msg.chat.id, messages);
    }

    const messageText = status === 'good'
        ? `ü§ñ –ó–∞–º–µ—á–∞–Ω–∏—è (${count}) –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ –±—É–¥—É—Ç ${STATUS_ROOM_GOOD}\n\n${destination}`
        : `ü§ñ –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å ${count} –∑–∞–º–µ—á–∞–Ω–∏–π, –ø–∏—à–∏—Ç–µ –º–Ω–µ –≤ –æ—Ç–≤–µ—Ç, –ø–æ–¥–∫—Ä–µ–ø–ª—è—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏!\n\n${room.intermediate_message}\n\n${destination}`;

    const inline_keyboard = [
        [{ text: '–ù–∞–∑–∞–¥ –∫ –æ—Ç–¥–µ–ª—É', callback_data: `back_to_${department}` }]
    ];

    if (status === 'good') {
        inline_keyboard.unshift([{ text: `${STATUS_ROOM_COMMENTED} –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è ${STATUS_ROOM_COMMENTED}`, callback_data: `open_comments_${data}` }]);
    } else {
        inline_keyboard.unshift([{ text: `${STATUS_ROOM_GOOD} –í—Å—ë –æ–∫, –∑–∞–∫—Ä—ã—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è ${STATUS_ROOM_GOOD}`, callback_data: `mark_good_${data}` }]);
    }

    bot.sendMessage(msg.chat.id, messageText, { reply_markup: { inline_keyboard } });
};


// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
bot.on('contact', async (msg) => {
    const chatId = msg.chat.id;
    userStatusInit(chatId);
    const contact = msg.contact;
    if (contact) {
        // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await bot.sendMessage(chatId, `–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç! ${contact.phone_number}`, {
            reply_markup: {
                remove_keyboard: true
            }
        });
        userStatuses.get(chatId).phoneNumber = contact.phone_number;
        userStatuses.get(chatId).step = STEPS.NAME; // —Å–ª–µ–¥—É—â–∏–π —ç—Ç–∞–ø
        // –ø—Ä–æ–¥–æ–ª–¥–µ–Ω–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
        await registrationMiddleware(chatId);
    } else {
        bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç.');
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start/, async (msg) => {
    if (msg.chat.type === 'group') return;
    console.log('start', msg.date);
    if(!await registrationMiddleware(msg.chat.id)) {
        console.log(`/start stopped by registrationMiddleware`);
        return;
    }
    let currentDay = getCurrentDateFormatted();
    let userName = userStatuses.get(msg.chat.id).name;
    await tg.sendMainMenu(bot, msg.chat.id, currentDay, userName);
});

bot.on("polling_error", console.log);
// –ö–æ–º–∞–Ω–¥–∞ /send
bot.onText(/\/send/, async (msg) => {
    if (msg.chat.type === 'group') return;
    console.log('!!!!!!!!!!!!!!!!!!!!send', msg.text);
    let dateString = msg.text.split(' ')[1].replace(/^(\d{2})\.(\d{2})\.(\d{4})$/, '$3-$2-$1');
    console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞: '${dateString}'`);
    await sendDayReport(msg.chat.id, dateString); // 2024-12-24




    // if(!await registrationMiddleware(msg.chat.id)) {
    //     console.log(`/start stopped by registrationMiddleware`);
    //     return;
    // }
    // let currentDay = getCurrentDateFormatted();
    // let userName = userStatuses.get(msg.chat.id).name;
    // await tg.sendMainMenu(bot, msg.chat.id, currentDay, userName);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('message', async (msg) => {
    // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ –±—É–¥–µ—Ç —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
    if (msg.contact || msg.from.id === bot.id || msg.chat.type === 'group') {
        return;
    }

    // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–Ω–∞–µ–º –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    if (!userStatuses.get(msg.chat.id)) {
        // –ó–¥–µ—Å—å –æ–Ω –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω
        if(!await registrationMiddleware(msg.chat.id)) {
            return;
        }
    }
    if (userStatuses.get(msg.chat.id).step === STEPS.NAME) {
        userStatuses.get(msg.chat.id).name = msg.text;
        userStatuses.get(msg.chat.id).step++;
        await registrationMiddleware(msg.chat.id);
        return;
        // –∏–º—è –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }
    if (userStatuses.get(msg.chat.id).step === STEPS.POSITION) {
        userStatuses.get(msg.chat.id).position = msg.text;
        userStatuses.get(msg.chat.id).step++;
        await registrationMiddleware(msg.chat.id);
        return;
        // –¥–æ–ª–∂–Ω–æ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    }

    console.log(`message`, msg);
    let userRegistered = await registrationMiddleware(msg.chat.id);
    if(!userRegistered) {
        console.log(`message stopped by registrationMiddleware`);
        return;
    }
    await handleMessage(msg);
});

// –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
bot.on('callback_query', async (callbackQuery) => {
    console.log(`callback_query`, callbackQuery.data);
    if (!await registrationMiddleware(callbackQuery.from.id)) {
        console.log(`callback_query stopped by registrationMiddleware`);
        return;
    }
    handleCallbackQuery(callbackQuery);
});

console.log('https://t.me/g1_remarks_bot');
